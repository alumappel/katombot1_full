@using fireBaseHandler.Shared.Entities
@inject HttpClient Http
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@inject NavigationManager navigat
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage

@page "/Pdf/{p}"

<div class="" style="padding: 0 3%;gap: 3em;display: flex;flex-direction: column; min-height:185vh">
    @if (loadP) {
    <div class="bg " style="">
        <div class="centerObject" style="width:fit-content">
            <div class=" d-flex justify-content-start align-items-start flex-row mt-3" style="padding-right: 4%; gap: 2em; width: max-content; box-shadow: var(--shaddow); float: right; margin-left: 6em;">
                <div class="profilePic" style="width:11.5em;height:11.5em;">
                    <div style="width: 11em; height: 11em;">
                        <img src="@user.Pic" style="min-height: 100% !important; width: 100%; min-width: 100% !important; height: 100%;"/>
                    </div>
                </div>
                <div>
                    <h3 class="text-right" style="word-break:break-word">@user.FirstName @user.LastName</h3>
                    <h4>@presentation.info.Name</h4>
                    <p>@presentation.info.Date</p>
                    <p>אורך הפרזנטציה @len דקות</p>
                    <p>פרזנטציה @type</p>
                </div>
            </div>
            <div style="display: flex;flex-direction: column;align-content: center;justify-content: center;align-items: flex-start;">
                <h4>הציון לפרזנטציה:</h4>
                <StaticScoreCir myid="presTotalS" width="250" lineWidth="11" goldCir="8" score="@myscore" isBig="true"></StaticScoreCir>
            </div>
        </div>
    </div>

    <div class="bg" style="display: flex;flex-direction: column;gap: 3em;">
        <div>

            <h3 style="align-self:flex-start; text-align:center;margin-bottom: 2em;">קול ודיבור</h3>
            <div class="d-flex">
                <div class="d-flex" style="gap: 6em; margin: auto;">
                    <div>
                        <h4>
                            הציון לשימוש בקול:
                        </h4>
                        <StaticScoreCir myid="voiceScore" width="250" lineWidth="10" goldCir="7" score="@score.Voicemeasure.score"></StaticScoreCir>

                    </div>
                    <div class="d-flex">
                        <div class="d-flex" style="flex-direction: column; height: 24em; justify-content: space-around;">
                            <h4>
                                מרכיבי הציון:
                            </h4>
                            @if (@score.PausesMeasure.score != -1)
                            {
                                <StaticRangeBar myid="pausebar" score="@score.PausesMeasure.score" Range="@score.PausesMeasure.myrange" place="@score.PausesMeasure.pos" width="18em" myFeedback="@score.PausesMeasure.pdfFeedBack"></StaticRangeBar>
                            }
                            @if (@score.QuietMeasure.score != -1)
                            {
                                List<double> qr = new List<double>() { 0.87, 1.4, 100 };
                                <StaticRangeBar myid="queitbar" score="@score.QuietMeasure.score" RangeD="@qr" place="@score.QuietMeasure.pos" width="18em" myFeedback="@score.QuietMeasure.pdfFeedBack"></StaticRangeBar>
                            }
                            @if (@score.PitchMeasure.score != -1)
                            {
                                <StaticRangeBar myid="pitchbar" score="@score.PitchMeasure.score" RangeD="@score.PitchMeasure.myrangeD" place="@score.PitchMeasure.posD" width="18em" myFeedback="@score.PitchMeasure.pdfFeedBack"></StaticRangeBar>
                            }
                            @if (@score.VolMeasure.score != -1)
                            {
                                <StaticRangeBar myid="volbar" score="@score.VolMeasure.score" RangeD="@score.VolMeasure.myrangeD" place="@score.VolMeasure.posD" width="18em" myFeedback="@score.VolMeasure.pdfFeedBack"></StaticRangeBar>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div>

            <h3 style="align-self:flex-start; text-align:center;margin-bottom: 2em;">תנועה</h3>

            <div class="d-flex" style="gap: 6em; margin: auto; gap: 6em; margin: auto; justify-content: space-evenly;">
                <div style="display: flex;flex-direction: column;align-content: center;align-items: center;">
                    <h4>
                        הציון לתנועה במרחב:
                    </h4>
                    @if (@score.MoveMeasure.score != -1)
                    {
                        <StaticScoreCir myid="moveScore" width="250" lineWidth="10" goldCir="7" score="@score.MoveMeasure.score"></StaticScoreCir>


                        <StaticRangeBar myid="movebar" score="@score.MoveMeasure.score" Range="@score.MoveMeasure.myrange" place="@score.MoveMeasure.pos" width="18em" myFeedback="@score.MoveMeasure.pdfFeedBack"></StaticRangeBar>
                    }
                    else
                    {
                        <InvalidScore size="15em" fontsize="6em"></InvalidScore>
                    }

                </div>
                <div style="display: flex;flex-direction: column;align-content: center;align-items: center;">
                    <h4>
                        הציון לתנועות ידיים:
                    </h4>
                    @if (@score.HandsMeasure.score != -1)
                    {
                        <StaticScoreCir myid="handsScore" width="250" lineWidth="10" goldCir="7" score="@score.HandsMeasure.score"></StaticScoreCir>

                        <StaticRangeBar myid="handbar" score="@score.HandsMeasure.score" Range="@score.HandsMeasure.myrange" place="@score.HandsMeasure.pos" width="18em" myFeedback="@score.HandsMeasure.pdfFeedBack"></StaticRangeBar>

                    }
                    else
                    {
                        <InvalidScore size="15em" fontsize="6em"></InvalidScore>

                    }
                </div>
            </div>
        </div>
        <div>

            <h3 style="align-self:flex-start; text-align:center;margin-bottom: 1em;">מבט</h3>
            <div class="d-flex" style="gap: 6em; margin: auto; gap: 6em; margin: auto; justify-content: space-evenly;">
                <div style="display: flex;flex-direction: column;align-content: center;align-items: center;">
                    <h4>
                        הציון להסטת מבט:
                    </h4>
                    @if (@score.EyeMeasure.score != -1)
                    {
                        <StaticScoreCir myid="eyeScore" width="250" lineWidth="10" goldCir="7" score="@score.Lookmeasure.score"></StaticScoreCir>
                        <StaticRangeBar score="@score.EyeMeasure.score" Range="@score.EyeMeasure.myrange" place="@score.EyeMeasure.pos" width="18em" myFeedback="@score.EyeMeasure.pdfFeedBack" myid="eyerange"></StaticRangeBar>

                    }
                    else
                    {
                        <InvalidScore size="15em" fontsize="6em"></InvalidScore>
                    }

                </div>
                <div style="display: flex;flex-direction: column;align-content: center;align-items: center;">
                    <h4>
                        כיווני מבט
                    </h4>
                    <div style="display: flex;gap: 0.5em;flex-direction: column;">
                        <div style="display: flex;flex-direction: column;align-content: center;align-items: center;">
                            <h5 style="font-size:14pt; font-weight:600; margin: 0em 0 1em 0; text-align:right">כיוון לרוחב החדר</h5>
                            <div>
                                <RightLeft right="@score.looks.Right" hcenter="@score.looks.Hcenter" left="@score.looks.Left"></RightLeft>
                            </div>
                        </div>
                        <div>
                            <h5 style="font-size:14pt; font-weight:600; margin: 1em auto;text-align:right">כיוון בגובה החדר</h5>
                            <LooksUpDown Up="@score.looks.Up" Down="@score.looks.Down" Vcenter="@score.looks.Vcenter" />
                        </div>

                    </div>
                </div>
            </div>
        </div>
        <div>
            <h3 style="align-self:flex-start; text-align:center;margin-bottom: 1em;">
                מדדים גופניים:
            </h3>
            <div class="d-flex" style=" margin: auto;  margin: auto; justify-content: space-evenly;">
                @if (stressWork)
                {
                    @if (stress != null)
                    {
                        <div class="flex-column" style="display: flex;align-items: center;align-content: center;">
                            <h4>
                                רמת ביטחון עצמי:
                            </h4>

                            <div class="bg" style="padding: 0 2em; border-radius: 1em; margin: 0.5em 0 2em 0;">
                                <StressChart gsr="stress.allR" time="presentation.arduino.Count"></StressChart>
                            </div>
                            <div class="row" style="gap:3.5em;">
                                <Calm img="icon-cool-icon" min="@stress.calmTime" mycolor="#9CF097" name="ביטחון"></Calm>
                                <Calm img="icon-stress-icon" min="@stress.stressTime" mycolor="#F0CB7F" name="התרגשות"></Calm>
                                <Calm img="icon-very-stress-icon" min="@stress.verystressTime" mycolor="#F073BC" name="לחץ"></Calm>
                            </div>
                        </div><div class="flex-column d-flex" style="justify-content: space-around;">
    <h4>
        קצב לב:
    </h4>
    @if (stress.heartAvg > 0)
    {
        <div class="heartCir">
            <div style="background-color:var(--bg)"><span style="color:@firstHeartC" class="icon-heart-icon"></span></div>
            <span style="width:15em">
                בממוצע קצב הלב היה @stress.heartAvg פעימות בדקה
            </span>
        </div>
        <div class="heartCir">
            <div style="background-color:var(--bg)"><span style="color:@secHeartC" class="icon-heart-icon"></span></div>
            <span style="width:15em">
                במשך @stress.heartStress דקות קצב הלב עלה והצביע על לחץ
            </span>
        </div>
    }
    else
    {
        <div class="d-flex flex-column justify-content-center align-content-center align-items-center">
            <InvalidScore size="7em" fontsize="3em" mar="1em"></InvalidScore>
            <p>לא התקבלו נתונים על קצב הלב</p>
        </div>

    }
    <div class="bg" style="width: 20em; margin-top: 3em; display: flex; justify-content: center; align-items: center; padding: 1em; border-radius: 20px;">
        <p style="font-size: 12pt; margin-bottom: 0;">
            <b>
                איך מחושב ביטחון עצמי?
            </b><br />
            הביטחון מחושב בעזרת חישוב של קצב הלב עם מוליכות העור (GSR)- מדד אשר מצביע על שינויים במצבים רגשיים.

        </p>
    </div>
                
</div>


                    }
                }
                else
                {
                    <div style="display:flex;flex-direction:column;gap: 2em;align-items: center;align-content: center;margin-top: 2em;">
                        <InvalidScore size="15em" fontsize="6em"></InvalidScore>
                        <p>לא התקבלו נתונים על רמת הביטחון</p>
                    </div>
                }
            </div>
        </div>
    </div>
    }
            else
            {
                <Loading></Loading>
            }
</div>


@code {
    [Parameter]
    public Presentation presentation { get; set; }
    [Parameter]
    public string p { get; set; }

    [Parameter]
    public LogInData user { get; set; }
    [Parameter]
    public string url { get; set; }
    int len;
    int show = 0;
    string showCaruosel = "transform: translateX(0em);";
    string scoreid = "";
    string message = "";
    bool loadFeedback = false;
    bool loadP = false;
    int myscore = 0;
    List<Measure> allscores = new List<Measure>();
    StressM stress;
    Score score = new Score();
    bool stressWork = true;
    string firstHeartC = "";
    string secHeartC = "";
    string msg = "";
    string type = "";
    protected override async Task OnInitializedAsync()
    {
        user =  sessionStorage.GetItem<LogInData>("user");
        if (user==null || p==null)
            navigat.NavigateTo("./MainPage");
        var getPresentation = await Http.GetAsync("api/FireBase/Presentation/u" + user.ID.ToString() + "/" +p);
        try
        {
            presentation =  await getPresentation.Content.ReadFromJsonAsync<Presentation>();
            loadP = true;
            print();
        }
        catch
        {
            navigat.NavigateTo("./MainPage");
        }
        url = sessionStorage.GetItem<string>("url");
        if (url == null)
            url = "./MainPage";
        else
        {
            len = (presentation.computer.Count - 1) / 2;
            scoreid = "score" + user.ID.ToString();
            score.presentation = presentation;
            score.divideToMeasure();
            myscore = score.myscore;
            allscores = score.getAllScores();
            score.getAllFeedback();
            if (presentation.info.Type == "comp")
                type = "מקוונת";
            else
                type = "פרונטלית";
            if (presentation.arduino.Count > 1)
            {
                try
                {

                    stress = new StressM();
                    stress.calcS(presentation.arduino);
                    if (stress.heartAvg < 90)
                        firstHeartC = "#9CF097";
                    else if (stress.heartAvg < 100)
                        firstHeartC = "#F0CB7F";
                    else
                        firstHeartC = "#F073BC";
                    if (stress.heartStress == 0)
                        secHeartC = "#9CF097";
                    else if (stress.heartStress < (presentation.arduino.Count - 1) / 2)
                        secHeartC = "#F0CB7F";
                    else
                        secHeartC = "#F073BC";

                    stressWork = true;



                }
                catch
                {
                    stressWork = false;

                }
            }
            else
                stressWork = false;
        }


    }


    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await Task.Delay(1000);
    //    await JSRuntime.InvokeVoidAsync("pdf");

    //    navigat.NavigateTo(url);

    //}  
    protected async void print ()
    {
        await Task.Delay(1000);
        await JSRuntime.InvokeVoidAsync("pdf", (user.FirstName+ " " + user.LastName),presentation.info.Name);
        await JSRuntime.InvokeVoidAsync("Return2title");

        navigat.NavigateTo(url);

    }

}

