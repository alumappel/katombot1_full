// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace fireBaseHandler.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 3 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using fireBaseHandler.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using fireBaseHandler.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using fireBaseHandler.Client.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using fireBaseHandler;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using fireBaseHandler.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using BlazorAnimate;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using fireBaseHandler.Client.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\Pages\Feedback.razor"
using fireBaseHandler.Shared.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\Pages\Feedback.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\Pages\Feedback.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\Pages\Feedback.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/Feedback")]
    public partial class Feedback : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 388 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\Pages\Feedback.razor"
       
    int show = 0;
    string hi = "hi";
    string showCaruosel = "transform: translateX(0em);";
    string scoreid = "";
    LogInData user;
    string message = "";
    bool loadFeedback = false;
    Presentation presentation = new Presentation();
    int myscore = 0;
    List<Measure> allscores = new List<Measure>();
    StressM stress;
    Score score = new Score();
    List<int> fiveLastScores = new List<int>();
    Score high;
    List<Measure> allScore = new List<Measure>();
    string progress = "";
    bool stressWork = false;
    string firstHeartC = "";
    string secHeartC = "";
    bool back = false;
    string link = "./Tip";
    int pcount;
    List<string> links = new List<string>() { "./Tips#Voice", "./Tips#Move", "./Tips#Look", "./Tips#Con" };
    protected override async Task OnInitializedAsync()
    {
        user = sessionStorage.GetItem<LogInData>("user");
        if (user == null)
            navigat.NavigateTo("./LogIn");
        else
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("login");
            }
            catch { }
            show = sessionStorage.GetItem<int>("show");

            scoreid = "score" + user.ID.ToString();
            string info = sessionStorage.GetItem<string>("myP");
            var getPresentation = await Http.GetAsync("api/FireBase/Presentation/u" + user.ID.ToString() + "/" + info);
            try
            {
                presentation = await getPresentation.Content.ReadFromJsonAsync<Presentation>();
            }
            catch
            {
                message = "קרתה תקלה";
            }

            if (presentation == null)
            {
                navigat.NavigateTo("./MainPage");

            }
            else
            {
                sessionStorage.SetItem("gototip", "./Feedback#myFeed");
                score.presentation = presentation;

                try
                {
                    score.divideToMeasure();
                    myscore = score.myscore;
                    if (myscore > 0)
                    {
                        allscores = score.getAllScores();
                        score.getAllFeedback();

                        if (presentation.arduino.Count > 1)
                        {
                            try
                            {
                                if (presentation.arduino.Count > 1)
                                {
                                    stress = new StressM();
                                    stress.calcS(presentation.arduino);
                                    if (stress.heartAvg < 90)
                                        firstHeartC = "var(--green)";
                                    else if (stress.heartAvg < 100)
                                        firstHeartC = "var(--gold)";
                                    else
                                        firstHeartC = "var(--red)";
                                    if (stress.heartStress == 0)
                                        secHeartC = "var(--green)";
                                    else if (stress.heartStress < (presentation.arduino.Count - 1) / 2)
                                        secHeartC = "var(--gold)";
                                    else
                                        secHeartC = "var(--red)";

                                    stressWork = true;
                                }
                                else
                                {
                                    stressWork = false;
                                }

                            }
                            catch
                            {
                                stressWork = false;

                            }
                        }
                        pcount = sessionStorage.GetItem<int>("pcount");
                        NewPinfo best;
                        if (pcount > 1)
                        {
                            fiveLastScores = sessionStorage.GetItem<List<int>>("fiveLast");

                            best = sessionStorage.GetItem<NewPinfo>("best");
                        }
                        else
                        {
                            fiveLastScores = new List<int>();
                            best = new NewPinfo()
                            {
                                Hands = -1, Look = -1, Move = -1, Voice = -1, Score = -1
                            };
                        }
                        high = new Score();
                        high.Lookmeasure = new Measure() { score = (int)Math.Round(best.Look), link = "#", Mname = "שינוי כיוון מבט", Micon = "icon-watch-icon", num = 2 };
                        high.MoveMeasure = new Measure() { score = (int)Math.Round(best.Move), link = "#", Mname = "תנועה בחלל", Micon = "icon-foot-icon", num = 1 };
                        high.HandsMeasure = new Measure() { score = (int)Math.Round(best.Hands), link = "#", Mname = "תנועות ידיים", Micon = "icon-hans-icon", num = 1 };
                        high.Voicemeasure = new Measure() { score = (int)Math.Round(best.Voice), link = "#", Mname = "שימוש בדיבור", Micon = "icon-mic-icon", num = 0 };

                        bool newPre = sessionStorage.GetItem<bool>("newPre");
                        if (newPre)
                        {
                            if (fiveLastScores == null)
                                fiveLastScores = new List<int>();
                            if (fiveLastScores.Count == 5)
                            {
                                fiveLastScores.RemoveAt(4);
                            }
                            fiveLastScores.Insert(0, score.myscore);
                  //          fiveLastScores.Reverse();
                            sessionStorage.SetItem("newPre", false);
                        }
                        if (fiveLastScores.Count > 1)
                        {
                            int change = fiveLastScores[0] - fiveLastScores[fiveLastScores.Count - 1];
                            if (change > 0)
                                progress = "בזמן האחרון השתפרת ב" + Math.Abs(change).ToString() + "%";
                            if (change < 0)
                                progress = "בזמן האחרון הייתה ירידה של " + Math.Abs(change).ToString() + "% בציון";
                        }
                        if (high != null)
                        {
                            if (high.myscore < score.myscore)
                                high.myscore = score.myscore;
                            if (high.MoveMeasure.score < score.MoveMeasure.score)
                                high.MoveMeasure.score = score.MoveMeasure.score;
                            if (high.Lookmeasure.score < score.Lookmeasure.score)
                                high.Lookmeasure.score = score.Lookmeasure.score;
                            if (high.Voicemeasure.score < score.Voicemeasure.score)
                                high.Voicemeasure.score = score.Voicemeasure.score;
                            if (high.HandsMeasure.score < score.HandsMeasure.score)
                                high.HandsMeasure.score = score.HandsMeasure.score;
                        }
                        else
                        {
                            high = score;
                        }
                        allScore.Add(high.Voicemeasure);
                        allScore.Add(high.Lookmeasure);
                        allScore.Add(high.HandsMeasure);
                        allScore.Add(high.MoveMeasure);

                        best.Look = high.Lookmeasure.score;
                        best.Voice = high.Voicemeasure.score;
                        best.Move = high.MoveMeasure.score;
                        best.Hands = high.HandsMeasure.score;
                        sessionStorage.SetItem("best", best);
                        sessionStorage.SetItem("fiveLast", fiveLastScores);


                        loadFeedback = true;

                    }
                    else
                    {
                        message = "בעיה בחישוב הנתונים";
                        back = true;

                    }
                }

                catch
                {
                    message = "בעיה בחישוב הנתונים";
                    back = true;
                }
            }
        }


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("stopS");
        }
        catch { }
    }

    protected async Task pdf()
    {
        sessionStorage.SetItem("pres", presentation);
        sessionStorage.SetItem("user", user);
        sessionStorage.SetItem("url", "./Feedback");
        navigat.NavigateTo("./Pdf/"+ presentation.info.ID.ToString());
    }

    protected private void go(int where)
    {
        show = where;
        sessionStorage.SetItem("show", show);
        navigat.NavigateTo("./Feedback#myFeed");
    }

    protected private void next()
    {

        show++;
        if (show == 4)
            show = 0;
        switch (show)
        {
            case 0:
                showCaruosel = "transform: translateX(0em);transition: 1s all linear;";
                break;
            case 1:
                showCaruosel = "transform: translateX(-72em);transition: 1s all linear;";

                break;
            case 2:
                showCaruosel = "transform: translateX(-144em);transition: 1s all linear;";
                break;
        }
        sessionStorage.SetItem("show", show);


    }
    protected private void pre()
    {
        show--;
        if (show == -1)
            show = 3;
        switch (show)
        {
            case 0:
                showCaruosel = "transform: translateX(0em);";
                break;
            case 1:
                showCaruosel = "transform: translateX(-72em);";
                break;
            case 2:
                showCaruosel = "transform: translateX(-144em);";
                break;
        }
        sessionStorage.SetItem("show", show);


    }



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.SessionStorage.ISyncSessionStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigat { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
