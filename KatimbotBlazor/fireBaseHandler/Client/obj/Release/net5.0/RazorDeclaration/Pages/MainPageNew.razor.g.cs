// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace fireBaseHandler.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 3 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using fireBaseHandler.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using fireBaseHandler.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using fireBaseHandler;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using fireBaseHandler.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\_Imports.razor"
using BlazorAnimate;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\Pages\MainPageNew.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\Pages\MainPageNew.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\Pages\MainPageNew.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\Pages\MainPageNew.razor"
using fireBaseHandler.Shared.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\Pages\MainPageNew.razor"
using fireBaseHandler.Client.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\Pages\MainPageNew.razor"
using fireBaseHandler.Client.Services;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/MainPage")]
    public partial class MainPageNew : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 272 "C:\Users\Aluma\Documents\katombot1_full\KatimbotBlazor\fireBaseHandler\Client\Pages\MainPageNew.razor"
       
    LogInData user = new LogInData();
    string username = "";
    bool log = false;
    bool allPres = false;
    //הגדרת משתנים
    string message = "";
    bool cardsLoad = false;
    List<int> fiveLastScores = new List<int>();
    List<NewPinfo> presList = new List<NewPinfo>();
    List<Measure> allScore = new List<Measure>();
    string moves = "0em";
    int movecard = 0;
    string progress = "";
    NewPinfo high = new NewPinfo();
    bool newu;
    string width = "23em";
    string defultImg = "./images/profile.svg";
    string myFileImage = "./images/profile.svg";
    List<string> DeletedImages = new List<string>();
    bool del = false;
    NewPinfo delP;
    long maxFileSize = 4194304;
    bool lodeDel = false;
    string msg = "";

    //פונקציה הפועלת מיד בעליית הדף
    protected override async Task OnInitializedAsync()
    {
        sessionStorage.SetItem("show", 0);
        sessionStorage.SetItem("newPre", false);
        sessionStorage.SetItem("gototip", "./MainPage");
        logged.isLog = true;
        user = sessionStorage.GetItem<LogInData>("user");

        newu = sessionStorage.GetItem<bool>("isnew");
        if (newu)
        {
            width = "32em";
            sessionStorage.SetItem("pcount", 0);

        }
        if (user == null)
        {
            navigat.NavigateTo("./LogIn");
        }
        else
        {


            username = user.FirstName;
            myFileImage = user.Pic;
            if (!newu)
            {

                try
                {
                    //קבלת כל הפרזנטציות שנעשו
                    var getResponse = await Http.GetAsync("api/FireBase/GetAllfix/" + user.ID.ToString());
                    Http.DefaultRequestHeaders.ConnectionClose = true;
                    presList = getResponse.Content.ReadFromJsonAsync<List<NewPinfo>>().Result;
                    presList.Reverse();
                    sessionStorage.SetItem("pcount", presList.Count);
                }
                catch
                {
                    //הודעת שגיאה
                    message = "לא הצלחתי למצוא את הפרזנטציות שלך";
                }

                if (presList.Count > 0)
                {
                    NewPinfo best = new NewPinfo() { Score = 0, Move = -1, Hands = -1, Look = -1, Voice = -1 } ;

                    Measure Lookmeasure = new Measure() { score = -1,link="#", Mname= "שינוי כיוון מבט", Micon= "icon-watch-icon", num=2 };
                    Measure MoveMeasure = new Measure() { score = -1, link = "#", Mname = "תנועה בחלל", Micon = "icon-foot-icon", num = 1 };
                    Measure HandsMeasure = new Measure() { score = -1, link = "#", Mname = "תנועות ידיים", Micon = "icon-hans-icon", num = 1 };
                    Measure Voicemeasure = new Measure() { score = -1, link = "#", Mname = "שימוש בדיבור", Micon = "icon-mic-icon", num = 0 };

                    foreach (NewPinfo pr in presList)
                    {
                        if (presList.IndexOf(pr) < 5)
                            fiveLastScores.Add(Convert.ToInt16(pr.Score));
                        if (best.Score < pr.Score)
                            best = pr;
                        if (best.Score < pr.Score)
                            best.Score = pr.Score;
                        if (best.Look < pr.Look)
                            best.Look = pr.Look;
                        if (best.Move < pr.Move)
                            best.Move = pr.Move;
                        if (best.Hands < pr.Hands)
                            best.Hands = pr.Hands;
                        if (best.Voice < pr.Voice)
                            best.Voice = pr.Voice;
                    }

                    if (fiveLastScores.Count > 1)
                    {
                        int change = fiveLastScores[0] - fiveLastScores[fiveLastScores.Count - 1];
                        if (change > 0)
                            progress = "בזמן האחרון השתפרת ב" + Math.Abs(change).ToString() + "%";
                        if (change < 0)
                            progress = "בזמן האחרון הייתה ירידה של " + Math.Abs(change).ToString() + "% בציון";
                    }
                    high.Score = best.Score;
                    Voicemeasure.score = (int)Math.Round(best.Voice);
                    Lookmeasure.score = (int)Math.Round(best.Look);
                    HandsMeasure.score = (int)Math.Round(best.Hands);
                    MoveMeasure.score = (int)Math.Round(best.Move);
                    allScore.Add(Voicemeasure);
                    allScore.Add(Lookmeasure);
                    allScore.Add(HandsMeasure);
                    allScore.Add(MoveMeasure);
                    sessionStorage.SetItem("best", best);
                    sessionStorage.SetItem("fiveLast", fiveLastScores);
                }
            }
            cardsLoad = true;
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("stopS");
        }
        catch { }
    }
    protected void ShowAll()
    {
        if (!allPres)
            allPres = true;
        else
            allPres = false;
    }
    protected void moveall()
    {
        movecard++;
        moves = (movecard * 13).ToString() + "em";
    }
    protected void moveback()
    {
        movecard--;
        moves = (movecard * 13).ToString() + "em";
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/FireBase/upload/u" + user.ID.ToString(), imageBase64);

                if (saveResponse.IsSuccessStatusCode == true)
                {
                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;
                    myFileImage = resizeUrl;
                    if (user.Pic != defultImg)
                    {
                        try
                        {
                            var delResponse = await Http.PostAsJsonAsync("api/FireBase/deleteImages", user.Pic);
                        }
                        catch { }
                    }
                    user.Pic = myFileImage;
                    sessionStorage.SetItem("user", user);
                }
            }
        }
    }

    private async Task delimg()
    {

        var delResponse = await Http.PostAsJsonAsync("api/FireBase/deleteImages/u" + user.ID.ToString(), user.Pic);
        if (delResponse.IsSuccessStatusCode)
        {
            user.Pic = defultImg;
            sessionStorage.SetItem("user", user);
            myFileImage = defultImg;
        }
    }
    protected void watch(int p)
    {
        sessionStorage.SetItem("myP", p.ToString());
        sessionStorage.SetItem("newPre", false);
        navigat.NavigateTo("./Feedback");
    }
    protected async Task pdf(int p)
    {
        sessionStorage.SetItem("pres", p);
        sessionStorage.SetItem("user", user);
        sessionStorage.SetItem("url", "./MainPage");
        navigat.NavigateTo("./Pdf/"+p.ToString());
    }

    protected void closedel()
    {
        del = false;
    }
    protected void opendel()
    {
        del = true;

    }
    protected void p2del(NewPinfo p)
    {
        delP = p;
        del = true;

    }

    protected void newDelFromCard(List <NewPinfo> newall)
    {
        presList = newall;
        fiveLastScores = new List<int>();
        for (int i = 0; i<5; i++)
        {
            if (i < presList.Count)
                fiveLastScores.Add((int)Math.Round(presList[i].Score));
        }
        if (movecard > 0)
            moveback();
    }
    //protected async void delfromcard(NewPinfo p)
    //{
    //    foreach (NewPinfo pres in presList)
    //    {
    //        if (pres.ID == p.ID)
    //        {
    //            delP = p;
    //            break;
    //        }
    //    }
    //    await delete();
    //}
    protected async Task delete()
    {
        del = true;
        lodeDel = true;
        var getResponse = await Http.GetAsync("api/FireBase/DelEmpty/u" + user.ID.ToString() + "/" + delP.ID.ToString());
        try
        {
            List<NewPinfo> newall = getResponse.Content.ReadFromJsonAsync<List<NewPinfo>>().Result;
            newall.Reverse();
            presList = newall;

        }
        catch {
            msg = "תקלה";
        }
        fiveLastScores = new List<int>();
        for (int i = 0; i < 5; i++)
        {
            if (i < presList.Count)
                fiveLastScores.Add((int)Math.Round(presList[i].Score));
        }
        if (movecard > 0)
            moveback();
        lodeDel = false;
        del = false;
        delP = new NewPinfo();



    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IsLog logged { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.SessionStorage.ISyncSessionStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigat { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
